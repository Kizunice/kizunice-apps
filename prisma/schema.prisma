generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model StudentProfile {
  id                  String               @id @default(cuid())
  userId              String
  user                User?                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name                String
  email               String?
  address             String
  phone               String
  gender              String
  age                 Int
  dateOfBirth         DateTime?
  placeOfBirth        String?
  originCountry       String?
  bodyHeight          String
  bodyWeight          String
  attendances         Attendance[]
  scores              Scores[]
  jobOppotunity       JobOpportunity[]
  jobApplications     JobApplication[]
  financeTransactions FinanceTransaction[]
  Learning            Learning[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model Attendance {
  id          String   @id @default(cuid())
  userId      String
  name        String
  user        User?    @relation(fields: [userId], references: [id])
  date        DateTime
  signIn      Boolean  @default(true)
  signOut     Boolean
  signInTime  DateTime @default(now())
  signOutTime DateTime
  status      String

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  StudentProfile   StudentProfile? @relation(fields: [studentProfileId], references: [id])
  studentProfileId String?
}

model Learning {
  id          String    @id @default(cuid())
  title       String
  description String?
  part        String
  fileUrl     String
  date        DateTime?
  senseiId    String
  senseiName  String?
  sensei      User?     @relation(fields: [senseiId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  students  StudentProfile[]
  scores    Scores[]
}

model Scores {
  id         String         @id @default(cuid())
  studentId  String
  student    StudentProfile @relation(fields: [studentId], references: [id])
  learningId String
  learning   Learning       @relation(fields: [learningId], references: [id])
  score      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobOpportunity {
  id                  String           @id @default(cuid())
  title               String
  description         String
  postedBy            String
  postDate            DateTime
  applicationDeadline DateTime
  poster              StudentProfile   @relation(fields: [postedBy], references: [id])
  applications        JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplication {
  id              String         @id @default(cuid())
  jobId           String
  studentId       String
  applicationDate DateTime
  status          String
  job             JobOpportunity @relation(fields: [jobId], references: [id])
  student         StudentProfile @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinanceTransaction {
  id               String          @id @default(cuid())
  userId           String
  transactionType  String // Consider using an enum for specific transaction types
  amount           Float
  description      String?
  transactionDate  DateTime
  user             User            @relation(fields: [userId], references: [id])
  studentProfile   StudentProfile? @relation(fields: [studentProfileId], references: [id])
  studentProfileId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                 String               @id @default(cuid())
  name               String?              @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  password           String
  emailVerified      DateTime?
  emailVerifToken    String?              @db.VarChar(255)
  image              String?
  role               Role                 @default(STUDENT)
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  profile            StudentProfile?
  FinanceTransaction FinanceTransaction[]
  Learning           Learning[]
  Attendance         Attendance[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  STUDENT
  SENSEI
  PARTNER
}
