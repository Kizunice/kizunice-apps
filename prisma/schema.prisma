generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model StudentProfile {
  id                  String               @id @default(cuid())
  userId              String?
  user                User?                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image               String?
  name                String?
  nihongoName         String?
  email               String?
  address             String?
  phone               String?
  parentsPhone        String?              @default("")
  gender              String?
  age                 Int?
  dateOfBirth         DateTime?
  placeOfBirth        String?
  originCountry       String?
  bodyHeight          String?
  bodyWeight          String?
  asalLPK             String?
  isHired             Boolean?             @default(false)
  isDepart            Boolean?             @default(false)
  isPaid              Boolean?             @default(false)
  religion            String?
  status              String?
  blood               String?
  desease             Boolean?             @default(false)
  deseaseName         String?              @default("")
  deseasePeriod       String?              @default("")
  shoesSize           String?              @default("")
  teesSize            String?              @default("")
  waistLine           String?              @default("")
  studyMonth          String?              @default("")
  smoking             String?
  drinking            String?
  esName              String?              @default("")
  esYearIn            String?
  esYearOut           String?
  msName              String?              @default("")
  msYearIn            String?
  msYearOut           String?
  hsName              String?              @default("")
  hsYearIn            String?
  hsYearOut           String?
  jobCompany          String?              @default("")
  jobDesc             String?              @default("")
  jobYearIn           DateTime?
  jobYearOut          DateTime?
  job2Company         String?              @default("")
  job2Desc            String?              @default("")
  job2YearIn          DateTime?
  job2YearOut         DateTime?
  motherName          String?              @default("")
  motherAge           String?              @default("")
  motherJob           String?              @default("")
  fatherName          String?              @default("")
  fatherAge           String?              @default("")
  fatherJob           String?              @default("")
  brotherName         String?              @default("")
  brotherAge          String?              @default("")
  brotherJob          String?              @default("")
  brother2Name        String?              @default("")
  brother2Age         String?              @default("")
  brother2Job         String?              @default("")
  brother3Name        String?              @default("")
  brother3Age         String?              @default("")
  brother3Job         String?              @default("")
  paspor              String?
  attendances         Attendance[]
  scores              Scores[]
  jobApplications     JobApplication[]
  financeTransactions FinanceTransaction[]
  learning            Learning[]
  document            Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model SenseiProfile {
  id           String       @id @default(cuid())
  userId       String
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image        String?
  name         String?
  email        String?
  address      String?
  phone        String?
  gender       String?
  dateOfBirth  DateTime?
  placeOfBirth String?
  attendances  Attendance[]
  scores       Scores[]
  learning     Learning[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model PartnerProfile {
  id              String           @id @default(cuid())
  userId          String
  user            User?            @relation(fields: [userId], references: [id])
  image           String?
  name            String?
  email           String?
  address         String?
  phone           String?
  company         Companies[]
  supervisor      String?
  country         String?
  jobApplications JobApplication[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JobOpportunity JobOpportunity[]

  @@unique([userId])
}

model Document {
  id        String         @id @default(cuid())
  link      String?
  created   Boolean?       @default(false)
  profileId String         @unique
  profile   StudentProfile @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Companies {
  id             String           @id @default(cuid())
  name           String           @unique
  address        String
  phone          String           @default("")
  supervisorId   String
  supervisor     PartnerProfile   @relation(fields: [supervisorId], references: [id])
  JobOpportunity JobOpportunity[]
}

model Attendance {
  id          String    @id @default(cuid())
  userId      String?
  name        String
  user        User?     @relation(fields: [userId], references: [id])
  date        DateTime
  signIn      Boolean   @default(true)
  signOut     Boolean
  signInTime  DateTime  @default(now())
  signOutTime DateTime?
  status      String

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  StudentProfile   StudentProfile? @relation(fields: [studentProfileId], references: [id])
  studentProfileId String?
  SenseiProfile    SenseiProfile?  @relation(fields: [senseiProfileId], references: [id])
  senseiProfileId  String?
}

model Learning {
  id          String           @id @default(cuid())
  sensei      SenseiProfile?   @relation(fields: [senseiId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senseiId    String?
  title       String
  description String?
  part        String
  fileUrl     String
  date        DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  students    StudentProfile[]
  scores      Scores[]
}

model Scores {
  id          String         @id @default(cuid())
  sensei      SenseiProfile? @relation(fields: [senseiId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senseiId    String?
  senseiName  String?
  studentId   String
  studentName String         @default("")
  student     StudentProfile @relation(fields: [studentId], references: [id])
  learningId  String
  learning    Learning       @relation(fields: [learningId], references: [id])
  bunpou      Int
  choukai     Int
  kanji       Int
  kaiwa       Int
  bunka       Int
  aisatsu     Int
  pushUp      Int
  sitUp       Int
  barbel      Int
  scoreAvg    Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model JobOpportunity {
  id           String           @id @default(cuid())
  title        String
  fieldJob     String
  typeJob      String?
  description  String
  needs        String?
  gender       String?
  location     String
  requirement  String
  detail       String
  benefit      String
  salary       String
  departure    DateTime?
  interview    DateTime?
  deadline     DateTime?
  companyId    String?
  company      Companies?       @relation(fields: [companyId], references: [id])
  supervisorId String?
  supervisor   PartnerProfile?  @relation(fields: [supervisorId], references: [id])
  applications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplication {
  id        String          @id @default(cuid())
  jobId     String
  studentId String
  partnerId String?
  status    Boolean         @default(false)
  note      String
  job       JobOpportunity  @relation(fields: [jobId], references: [id])
  student   StudentProfile  @relation(fields: [studentId], references: [id])
  partner   PartnerProfile? @relation(fields: [partnerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinanceTransaction {
  id              String          @id @default(cuid())
  userId          String
  transactionType Type            @default(EXPENSE)
  amount          Float
  amountLeft      Float           @default(41000000)
  description     String?
  studentPayment  String?         @default("")
  transactionDate DateTime
  user            User            @relation(fields: [userId], references: [id])
  studentId       String?
  student         StudentProfile? @relation(fields: [studentId], references: [id], onDelete: SetNull, onUpdate: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                 String               @id @default(cuid())
  name               String?              @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  password           String
  emailVerified      DateTime?
  emailVerifToken    String?              @db.VarChar(255)
  image              String?
  role               Role                 @default(STUDENT)
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  profile            StudentProfile?
  FinanceTransaction FinanceTransaction[]
  Attendance         Attendance[]
  PartnerProfile     PartnerProfile?
  SenseiProfile      SenseiProfile?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  STUDENT
  SENSEI
  PARTNER
  FINANCE
}

enum Type {
  EXPENSE
  INCOME
}
