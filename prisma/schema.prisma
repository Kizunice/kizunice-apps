generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model StudentProfile {
  id                  String               @id @default(cuid())
  userId              String?
  user                User?                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image               String?
  name                String?
  nihongoName         String?
  email               String?
  address             String?
  phone               String?
  parentsPhone        String?              @default("")
  gender              String?
  age                 Int?
  dateOfBirth         DateTime?
  placeOfBirth        String?
  originCountry       String?
  bodyHeight          String?
  bodyWeight          String?
  asalLPK             String?
  isHired             Boolean?             @default(false)
  isDepart            Boolean?             @default(false)
  isPaid              Boolean?             @default(false)
  religion            String?
  status              String?
  blood               String?
  desease             Boolean?             @default(false)
  deseaseName         String?              @default("")
  deseasePeriod       String?              @default("")
  shoesSize           String?              @default("")
  teesSize            String?              @default("")
  waistLine           String?              @default("")
  studyMonth          String?              @default("")
  smoking             Boolean?             @default(false)
  smokingPerWeek      String?
  drinking            Boolean?             @default(false)
  drinkingPerWeek     String?
  savingAmount        String?
  savingGoal          String?
  specialSkill        String?
  acquintance         String?
  aboutMe             String?
  esName              String?              @default("")
  esYearIn            DateTime?
  esYearOut           DateTime?
  msName              String?              @default("")
  msYearIn            DateTime?
  msYearOut           DateTime?
  hsName              String?              @default("")
  hsYearIn            DateTime?
  hsYearOut           DateTime?
  jobCompany          String?              @default("")
  jobDesc             String?              @default("")
  jobYearIn           DateTime?
  jobYearOut          DateTime?
  job2Company         String?              @default("")
  job2Desc            String?              @default("")
  job2YearIn          DateTime?
  job2YearOut         DateTime?
  motherName          String?              @default("")
  motherAge           String?              @default("")
  motherJob           String?              @default("")
  fatherName          String?              @default("")
  fatherAge           String?              @default("")
  fatherJob           String?              @default("")
  brotherName         String?              @default("")
  brotherAge          String?              @default("")
  brotherJob          String?              @default("")
  brother2Name        String?              @default("")
  brother2Age         String?              @default("")
  brother2Job         String?              @default("")
  brother3Name        String?              @default("")
  brother3Age         String?              @default("")
  brother3Job         String?              @default("")
  paspor              String?
  attendances         Attendance[]
  scores              Scores[]
  jobApplications     JobApplication[]
  financeTransactions FinanceTransaction[]
  learning            Learning[]
  document            Document[]
  studentPayment      StudentPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model SenseiProfile {
  id           String       @id @default(cuid())
  userId       String
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image        String?
  name         String?
  email        String?
  address      String?
  phone        String?
  gender       String?
  dateOfBirth  DateTime?
  placeOfBirth String?
  attendances  Attendance[]
  scores       Scores[]
  learning     Learning[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model StaffProfile {
  id           String    @id @default(cuid())
  userId       String
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         String?
  image        String?
  name         String?
  email        String?
  address      String?
  phone        String?
  gender       String?
  dateOfBirth  DateTime?
  placeOfBirth String?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  document           Document[]
  financeTransaction FinanceTransaction[]

  @@unique([userId])
}

model PartnerProfile {
  id              String           @id @default(cuid())
  userId          String
  user            User?            @relation(fields: [userId], references: [id])
  image           String?
  name            String?
  email           String?
  address         String?
  phone           String?
  company         Companies[]
  supervisor      String?
  country         String?
  jobApplications JobApplication[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  jobOpportunity JobOpportunity[]

  @@unique([userId])
}

model Document {
  id        String         @id @default(cuid())
  studentId String         @unique
  student   StudentProfile @relation(fields: [studentId], references: [id])
  staffId   String?
  staff     StaffProfile?  @relation(fields: [staffId], references: [id])
  link      String?
  name      String?
  created   Boolean?       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Companies {
  id             String           @id @default(cuid())
  name           String           @unique
  address        String
  phone          String           @default("")
  supervisorId   String
  supervisor     PartnerProfile   @relation(fields: [supervisorId], references: [id])
  jobOpportunity JobOpportunity[]
}

model Attendance {
  id          String          @id @default(cuid())
  student     StudentProfile? @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId   String?
  sensei      SenseiProfile?  @relation(fields: [senseiId], references: [id])
  senseiId    String?
  name        String
  date        DateTime
  signIn      Boolean         @default(true)
  signOut     Boolean
  signInTime  DateTime        @default(now())
  signOutTime DateTime?
  status      String
  accepted    Boolean?        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Learning {
  id          String           @id @default(cuid())
  sensei      SenseiProfile?   @relation(fields: [senseiId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senseiId    String?
  title       String
  description String?
  part        Int?
  fileUrl     String?
  date        DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  students    StudentProfile[]
  scores      Scores[]
}

model Scores {
  id          String         @id @default(cuid())
  sensei      SenseiProfile? @relation(fields: [senseiId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senseiId    String?
  senseiName  String?
  studentId   String
  studentName String         @default("")
  student     StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  learningId  String
  learning    Learning       @relation(fields: [learningId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grade       Grade          @default(E)
  bunpou      Int
  choukai     Int
  kanji       Int
  kaiwa       ScoreABC?
  bunka       ScoreABC?
  aisatsu     ScoreABC?
  pushUp      Int
  sitUp       Int
  barbel      Int
  linkFile    String?
  scoreAvg    Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model JobOpportunity {
  id           String          @id @default(cuid())
  supervisorId String?
  supervisor   PartnerProfile? @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId    String?
  company      Companies?      @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title        String
  fieldJob     String
  typeJob      String?
  description  String
  needs        String?
  gender       String?
  location     String
  requirement  String
  detail       String
  benefit      String
  salary       String
  departure    DateTime?
  interview    DateTime?
  deadline     DateTime?
  linkFile     String?

  applications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplication {
  id        String          @id @default(cuid())
  jobId     String
  studentId String
  partnerId String?
  status    StatusJob?      @default(Pengajuan)
  note      String
  job       JobOpportunity  @relation(fields: [jobId], references: [id])
  student   StudentProfile  @relation(fields: [studentId], references: [id])
  partner   PartnerProfile? @relation(fields: [partnerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinanceTransaction {
  id              String          @id @default(cuid())
  staffId         String
  staff           StaffProfile    @relation(fields: [staffId], references: [id])
  studentId       String?
  student         StudentProfile? @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentId       String?
  payment         StudentPayment? @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionType Type            @default(EXPENSE)
  amount          Float
  amountLeft      Float           @default(41000000)
  description     String?
  studentPayment  String?         @default("")
  transactionDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model StudentPayment {
  id            String               @id @default(cuid())
  totalCost     Float                @default(41000000)
  costLeft      Float
  note          String?
  isPaidOff     Boolean?             @default(false)
  isInstallment Boolean?             @default(false)
  studentId     String?
  student       StudentProfile?      @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  finance       FinanceTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                 String               @id @default(cuid())
  name               String?              @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  password           String
  emailVerified      DateTime?
  emailVerifToken    String?              @db.VarChar(255)
  image              String?
  role               Role                 @default(STUDENT)
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  profile            StudentProfile?
  FinanceTransaction FinanceTransaction[]
  PartnerProfile     PartnerProfile?
  SenseiProfile      SenseiProfile?
  StaffProfile       StaffProfile?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  STUDENT
  SENSEI
  PARTNER
  FINANCE
  DOCUMENT
  MASTER
}

enum Type {
  EXPENSE
  INCOME
}

enum Grade {
  A
  B
  C
  D
  E
}

enum ScoreABC {
  A
  B
  C
  D
  E
}

enum StatusJob {
  Pengajuan
  Diterima
  Ditolak
  Cadangan
}
