generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Profile {
  id                  String               @id @default(cuid())
  bio                 String?
  userId              String               @unique
  User                User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dateOfBirth         DateTime?
  placeOfBirth        String?
  originCountry       String?
  attendances         Attendance[]
  learningMaterial    LearningMaterial[]
  jobOppotunity       JobOpportunity[]
  jobApplications     JobApplication[]
  financeTransactions FinanceTransaction[]
}

model Attendance {
  id        String   @id @default(cuid())
  studentId String
  date      DateTime
  clockIn   DateTime
  clockOut  DateTime
  status    String
  student   Profile  @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
}

model LearningMaterial {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  uploadedBy  String
  uploadDate  DateTime
  uploader    Profile  @relation(fields: [uploadedBy], references: [id])
}

// model LearningScore {
//   id          Int      @id @default(cuid())
//   studentId   Int
//   senseiId    Int
//   score       Float
//   comments    String?
//   date        DateTime
//   student     Profile     @relation("studentScores", fields: [studentId], references: [id])
//   sensei      Profile     @relation("senseiScores", fields: [senseiId], references: [id])
// }

model JobOpportunity {
  id                  String           @id @default(cuid())
  title               String
  description         String
  postedBy            String
  postDate            DateTime
  applicationDeadline DateTime
  poster              Profile          @relation(fields: [postedBy], references: [id])
  applications        JobApplication[]
}

model JobApplication {
  id              String         @id @default(cuid())
  jobId           String
  studentId       String
  applicationDate DateTime
  status          String
  job             JobOpportunity @relation(fields: [jobId], references: [id])
  student         Profile        @relation(fields: [studentId], references: [id])
}

model FinanceTransaction {
  id              String   @id @default(cuid())
  userId          String
  transactionType String // Consider using an enum for specific transaction types
  amount          Float
  description     String?
  transactionDate DateTime
  user            Profile  @relation(fields: [userId], references: [id])
}

model User {
  id              String    @id @default(cuid())
  name            String?   @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  password        String
  emailVerified   DateTime?
  emailVerifToken String?   @db.VarChar(255)
  image           String?
  role            Role      @default(STUDENT)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  Profile         Profile?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  STUDENT
  SENSEI
  PARTNER
}
